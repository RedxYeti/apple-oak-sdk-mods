name: CI

on: [
  push,
  pull_request,
  workflow_dispatch
]

env:
  # Important to pin the clang version, cause we also use it for linting
  CLANG_VERSION: 17
  CLANG_TIDY_JOBS: 4
  # LLVM MinGW download
  LLVM_MINGW_VERSION: llvm-mingw-20231128-msvcrt-ubuntu-20.04-x86_64
  LLVM_MINGW_DOWNLOAD: https://github.com/mstorsjo/llvm-mingw/releases/download/20231128/llvm-mingw-20231128-msvcrt-ubuntu-20.04-x86_64.tar.xz
  # xwin settings
  XWIN_VERSION: xwin-0.5.0-x86_64-unknown-linux-musl
  XWIN_DOWNLOAD: https://github.com/Jake-Shadle/xwin/releases/download/0.5.0/xwin-0.5.0-x86_64-unknown-linux-musl.tar.gz
  # Limit which presets make artifacts
  RELEASE_ARTIFACT_PRESET: "msvc-release"
  ALLOWED_ARTIFACT_PRESETS: "msvc-release;"

jobs:
  cache-clang:
    runs-on: windows-latest

    steps:
    - name: Cache Clang
      uses: actions/cache@v4
      id: cache-clang
      with:
        path: C:\Program Files\LLVM
        key: ${{ runner.os }}-clang-${{ env.CLANG_VERSION }}
        lookup-only: true

    - name: Setup Clang
      if: steps.cache-clang.outputs.cache-hit != 'true'
      uses: egor-tensin/setup-clang@v1
      with:
        version: ${{ env.CLANG_VERSION }}

# ==============================================================================

  build-windows:
    runs-on: windows-latest
    needs: cache-clang

    strategy:
      fail-fast: false
      matrix:
        preset:
        - clang-release
        - msvc-release

    steps:
    - name: Restore Clang Cache
      if: startswith(matrix.preset, 'clang')
      uses: actions/cache/restore@v4
      with:
        path: C:\Program Files\LLVM
        key: ${{ runner.os }}-clang-${{ env.CLANG_VERSION }}
        fail-on-cache-miss: true

    - name: Add MSVC to PATH
      if: startswith(matrix.preset, 'msvc')
      uses: TheMrMilchmann/setup-msvc-dev@v3
      with:
        arch: x64

    - name: Setup CMake and Ninja
      uses: lukka/get-cmake@latest

    # We only actually need this python version to run the download script, we're not going to link
    # against it, so don't need to specify arch
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: ">=3.11"

    - name: Setup Pip
      run: pip install requests

    # `actions/checkout` automatically deals with ssh urls, but we have CMake pull some instead
    # Since the mod manager repo (and it's subrepos) use ssh urls, we need to add a key
    - name: Add ssh key
      # Windows specially needs to use an older version
      # https://github.com/webfactory/ssh-agent/pull/17#issuecomment-1851790415
      # https://github.com/webfactory/ssh-agent/issues/202
      uses: webfactory/ssh-agent@v0.7.0
      with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Checkout repository and submodules
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Build
      working-directory: ${{ env.GITHUB_WORKSPACE }}
      run: >
        python ./prepare_releases.py
        --preset ${{ matrix.preset }}
        --configure
        --build

    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      if: contains(env.ALLOWED_ARTIFACT_PRESETS, matrix.preset)
      with:
        name: ${{ matrix.preset }}
        path: |
          *.zip
          *.sdkmod

  build-ubuntu:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        preset:
        - clang-cross-release
        - llvm-mingw-release
        # Currently, ubuntu-latest is 22.04, whose mingw version is too old, so disabling this build
        # for now
        # Not sure of the exact threshold, 13.1.0 works
        #  - mingw-release

    steps:
    - name: Setup CMake and Ninja
      uses: lukka/get-cmake@latest

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: ">=3.11"

    - name: Setup Pip
      run: pip install requests

    - name: Setup msitools
      uses: awalsh128/cache-apt-pkgs-action@master
      with:
        packages: msitools
        version: ${{ runner.os }}-apt

    # Both Clang and MinGW install quick enough that it's not worth caching
    # Caching would also lose the +x - so we'd have to tar before caching/untar after, making it
    #  even slower
    - name: Setup Clang
      if: startswith(matrix.preset, 'clang')
      run: |
        wget https://apt.llvm.org/llvm.sh
        chmod +x llvm.sh
        sudo ./llvm.sh ${{ env.CLANG_VERSION }}

        sudo update-alternatives --install              \
          /usr/bin/clang                                \
          clang                                         \
          /usr/bin/clang-${{ env.CLANG_VERSION }}       \
          200
        sudo update-alternatives --install              \
          /usr/bin/clang++                              \
          clang++                                       \
          /usr/bin/clang++-${{ env.CLANG_VERSION }}     \
          200
        sudo update-alternatives --install              \
          /usr/bin/llvm-rc                              \
          llvm-rc                                       \
          /usr/bin/llvm-rc-${{ env.CLANG_VERSION }}     \
          200

    - name: Setup LLVM MinGW
      if: startswith(matrix.preset, 'llvm-mingw')
      run: |
        wget -nv ${{ env.LLVM_MINGW_DOWNLOAD }}
        tar -xf ${{ env.LLVM_MINGW_VERSION }}.tar.xz -C ~/
        echo $(readlink -f ~/${{ env.LLVM_MINGW_VERSION }}/bin) >> $GITHUB_PATH

    - name: Set up MinGW
      if: startswith(matrix.preset, 'mingw')
      uses: egor-tensin/setup-mingw@v2
      with:
        platform: x64

    # xwin does take long enough that caching's worth it
    - name: Restore xwin cache
      if: contains(matrix.preset, 'cross')
      uses: actions/cache@v4
      id: cache-xwin
      with:
        path: ~/xwin
        key: ${{ runner.os }}-xwin

    - name: Setup xwin
      if: contains(matrix.preset, 'cross') && steps.cache-xwin.outputs.cache-hit != 'true'
      run: |
        wget -nv ${{ env.XWIN_DOWNLOAD }}
        tar -xf ${{ env.XWIN_VERSION }}.tar.gz
        ${{ env.XWIN_VERSION }}/xwin    \
          --accept-license              \
          --arch x86_64                 \
          splat                         \
          --include-debug-libs          \
          --output ~/xwin

    - name: Add ssh key
      uses: webfactory/ssh-agent@v0.9.0
      with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Checkout repository and submodules
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Build
      working-directory: ${{ env.GITHUB_WORKSPACE }}
      run: >
        ./prepare_releases.py
        --preset ${{ matrix.preset }}
        --configure -C-G=Ninja -C-DXWIN_DIR=$(readlink -f ~)/xwin
        --build
      # The extra xwin dir arg won't do anything if we're not using it

    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      if: contains(env.ALLOWED_ARTIFACT_PRESETS, matrix.preset)
      with:
        name: ${{ matrix.preset }}
        path: |
          *.zip
          *.sdkmod

# ==============================================================================

  clang-tidy:
    runs-on: windows-latest
    needs: cache-clang

    strategy:
      fail-fast: false
      matrix:
        preset:
        - clang-release

    steps:
    - name: Restore Clang Cache
      uses: actions/cache/restore@v4
      with:
        path: C:\Program Files\LLVM
        key: ${{ runner.os }}-clang-${{ env.CLANG_VERSION }}
        fail-on-cache-miss: true

    - name: Setup CMake and Ninja
      uses: lukka/get-cmake@latest

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: ">=3.11"

    - name: Add ssh key
      uses: webfactory/ssh-agent@v0.7.0
      with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Checkout repository and submodules
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Configure build
      working-directory: ${{ env.GITHUB_WORKSPACE }}
      # Also need pyyaml for clang tidy to enable `-export-fixes`
      run: |
        pip install pyyaml requests

        python prepare_releases.py                                              `
          --preset ${{ matrix.preset }}                                         `
          --configure -C-DCMAKE_DISABLE_PRECOMPILE_HEADERS=On

        (Get-Content ".out\build\${{ matrix.preset }}\compile_commands.json")   `
          -replace "@\S+CMakeFiles\S+?\.modmap", ""                                 `
        | Set-Content                                                           `
          -Path ".out\build\${{ matrix.preset }}\compile_commands.json"

    - name: Run clang-tidy
      working-directory: ${{ env.GITHUB_WORKSPACE }}
      run: |
        python (Get-Command run-clang-tidy).Source                              `
          -j ${{ env.CLANG_TIDY_JOBS }}                                         `
          -p ".out\build\${{ matrix.preset }}"                                  `
          -export-fixes clang-tidy-fixes.yml                                    `
          $([Regex]::Escape("$pwd\") + "[^.].+\.(c|cpp|h|hpp)$")                `
          -extra-arg="-Wno-unknown-pragmas"
      # For some reason, the above started giving unknown pragma errors in library headers (both
      # unrealsdk and python) in clang-tidy 17
      # It compiles fine, doesn't show up in clangd, and doesn't happen in the unrealsdk build, so
      # just suppressing it for now

    - name: Process clang-tidy warnings
      uses: asarium/clang-tidy-action@v1
      with:
        fixesFile: clang-tidy-fixes.yml

  clang-format:
    runs-on: windows-latest
    needs: cache-clang

    steps:
    - name: Restore Clang Cache
      uses: actions/cache/restore@v4
      with:
        path: C:\Program Files\LLVM
        key: ${{ runner.os }}-clang-${{ env.CLANG_VERSION }}
        fail-on-cache-miss: true

    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Run clang-format
      run: |
        $all_files=$(Get-ChildItem                                                  `
                      $(Get-ChildItem . -Directory -Exclude ".*")                   `
                      -File                                                         `
                      -Recurse                                                      `
                      -Include ("*.c", "*.cpp", "*.h", "*.hpp")                     `
                    | % FullName)

        echo "::group::Files being checked"
        foreach ($file in $all_files) { echo $file }
        echo "::endgroup::"

        clang-format -n -Werror $all_files

# ==============================================================================

  spelling:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Check spelling
      uses: crate-ci/typos@master

  pyright:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        path: oak-sdk-mods

    - name: Checkout pyunrealsdk
      uses: actions/checkout@v4
      with:
        repository: bl-sdk/pyunrealsdk
        path: pyunrealsdk

    - name: Checkout oak-mod-manager
      uses: actions/checkout@v4
      with:
        repository: bl-sdk/oak-mod-manager
        path: oak-mod-manager

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: ">=3.11"
        cache: 'pip'

    - name: Install tomlq
      run: pip install yq

    - name: Add stub paths to pyproject.toml
      run: >
        tomlq -it '.tool.pyright.extraPaths =
        ["../pyunrealsdk/stubs",
        "../oak-mod-manager/src"]'
        oak-sdk-mods/pyproject.toml

    - name: Run pyright
      uses: jakebailey/pyright-action@v2
      with:
        working-directory: oak-sdk-mods

  ruff:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Run Ruff Linting
      uses: chartboost/ruff-action@v1

    - name: Run Ruff Formatting
      uses: chartboost/ruff-action@v1
      with:
        args: format --check

# ==============================================================================

  release:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' && github.repository == 'apple1417/oak-sdk-mods'

    needs:
      - build-ubuntu
      - build-windows
      - clang-tidy
      - clang-format
      - spelling
      - pyright
      - ruff

    permissions:
      contents: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download releases
      uses: actions/download-artifact@v4
      with:
        name: ${{ env.RELEASE_ARTIFACT_PRESET }}

    - name: Upload releases
      uses: andelf/nightly-release@main
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: nightly
        files: |
          *.sdkmod
          *.zip
        name: Automated Releases
        prerelease: false
        body: >
          This release is automatically built from the latest (passing) commits on master.
